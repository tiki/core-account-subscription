AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Core Subscription Step Function

Parameters:
  WorkGroup:
    Description: Name of the Athena workgroup
    Type: String
    Default: cleanroom
  LogGroup:
    Description: Name of the cloudwatch log group
    Type: String
    Default: core-subscription-step
  AccountUrl:
    Description: Account service URL to POST results to
    Type: String
    Default: "https://account.mytiki.com/api/latest/result"

Resources:
  Log:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref LogGroup
      RetentionInDays: 30

  Function:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: rust-cargolambda
    Properties:
      CodeUri: ../..
      Handler: bootstrap
      Runtime: provided.al2
      MemorySize: 128
      Timeout: 10
      Architectures:
        - x86_64
      Layers:
        - arn:aws:lambda:us-east-2:590474943231:layer:AWS-Parameters-and-Secrets-Lambda-Extension:11

  Step:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: CoreSubscription
      RoleArn: !GetAtt Role.Arn
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt Log.Arn
        IncludeExecutionData: true
        Level: ERROR
      Definition:
        Comment: Asynchronously execute subscription queries
        StartAt: StartQueryExecution
        States:
          StartQueryExecution:
            Type: Task
            Resource: arn:aws:states:::athena:startQueryExecution.sync
            Parameters:
              "QueryString.$": "$.Query"
              WorkGroup: !Ref WorkGroup
            ResultPath: $.Execution
            Next: LambdaInvoke
          LambdaInvoke:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            OutputPath: $.Payload
            Parameters:
              "Payload.$": "$"
              FunctionName: !Sub [ "${Arn}:$LATEST", { Arn: !GetAtt Function.Arn } ]
            Retry:
              - ErrorEquals:
                  - Lambda.ServiceException
                  - Lambda.AWSLambdaException
                  - Lambda.SdkClientException
                  - Lambda.TooManyRequestsException
                IntervalSeconds: 1
                MaxAttempts: 3
                BackoffRate: 2
            End: true

  Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: StepFunctionCoreSubscription
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: states.amazonaws.com
      Policies:
        - PolicyName: Lambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - "*"
        - PolicyName: Cloudwatch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:CreateLogStream
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutLogEvents
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource:
                  - "*"
        - PolicyName: Athena
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - athena:startQueryExecution
                  - athena:stopQueryExecution
                  - athena:getQueryExecution
                  - athena:getDataCatalog
                Resource:
                  - !Sub arn:aws:athena:${AWS::Region}:${AWS::AccountId}:workgroup/${WorkGroup}
                  - !Sub arn:aws:athena:${AWS::Region}:${AWS::AccountId}:datacatalog/*
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:ListMultipartUploadParts
                  - s3:AbortMultipartUpload
                  - s3:CreateBucket
                  - s3:PutObject
                Resource:
                  - arn:aws:s3:::*
              - Effect: Allow
                Action:
                  - glue:GetDatabase
                  - glue:GetDatabases
                  - glue:GetTable
                  - glue:GetTables
                  - glue:GetPartition
                  - glue:GetPartitions
                  - glue:BatchGetPartition
                Resource:
                  - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog
                  - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/*
                  - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/*/*
              - Effect: Allow
                Action:
                  - glue:CreateDatabase
                  - glue:UpdateDatabase
                  - glue:DeleteDatabase
                  - glue:CreateTable
                  - glue:UpdateTable
                  - glue:DeleteTable
                  - glue:BatchDeleteTable
                  - glue:BatchCreatePartition
                  - glue:CreatePartition
                  - glue:UpdatePartition
                  - glue:DeletePartition
                  - glue:BatchDeletePartition
                NotResource:
                  - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/ocean
                  - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/ocean/*
